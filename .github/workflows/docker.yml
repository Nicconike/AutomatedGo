name: Publish Packages

on:
    push:
        paths:
            - '.github/workflows/docker.yml'
        tags:
            - 'v*.*.*'

jobs:
    packages:
        name: Docker Images
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
        steps:
          - name: GitHub App Token
            uses: actions/create-github-app-token@v1
            id: app-token
            with:
                app-id: ${{ secrets.APP_ID }}
                private-key: ${{ secrets.APP_PRIVATE_KEY }}

          - name: Checkout Repo
            uses: actions/checkout@v4
            with:
                fetch-depth: 0
                token: ${{ steps.app-token.outputs.token }}

            # Install the cosign tool except on PR
            # https://github.com/sigstore/cosign-installer
          - name: Install cosign
            if: github.event_name != 'pull_request'
            uses: sigstore/cosign-installer@v3.7.0
            with:
                cosign-release: 'v2.4.0'

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Log in to Docker Hub
            uses: docker/login-action@v3
            with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

          - name: Login to GitHub Container Registry
            uses: docker/login-action@v3
            with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

          - name: Extract Docker Metadata
            id: meta
            uses: docker/metadata-action@v5
            with:
                images: |
                    ${{ vars.DOCKER_USERNAME }}/automatedgo
                    ghcr.io/${{ github.repository_owner }}/AutomatedGo
                tags: |
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=semver,pattern={{major}}.{{minor}}.{{patch}}
                skip-sha: true

          - name: Build & Push Docker Images
            id: push
            uses: docker/build-push-action@v6
            with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                secrets: |
                    GITHUB_TOKEN=${{ steps.app-token.outputs.token }}

            # Sign the resulting Docker image digest except on PRs.
            # https://github.com/sigstore/cosign
          - name: Sign the published Docker Image
            if: ${{ github.event_name != 'pull_request' }}
            env:
                # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
                TAGS: ${{ steps.meta.outputs.tags }}
                DIGEST: ${{ steps.push.outputs.digest }}
            run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

          - name: Generate Artifact Attestation
            uses: actions/attest-build-provenance@v1
            with:
                subject-name: ghcr.io/${{ github.repository_owner }}/AutomatedGo
                subject-digest: ${{ steps.push.outputs.digest }}
                push-to-registry: true

    cleanup:
        runs-on: ubuntu-latest
        needs: packages
        permissions:
            contents: read
            packages: write
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4

          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

          - name: Login to GitHub Container Registry
            uses: docker/login-action@v3
            with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

          - name: List & Delete Old Docker Hub Tags
            run: |
                echo "Fetching Docker Hub tags..."
                tags=$(curl -s "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/automatedgo/tags" | jq -r '.results[].name')
                echo "Tags found in Docker Hub:"
                echo "$tags"
                latest_tag=$(echo "$tags" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1)
                echo "Latest semantic version tag is $latest_tag"
                for tag in $tags; do
                    if [[ ! "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ || "$tag" != "$latest_tag" ]]; then
                        echo "Deleting tag $tag from Docker Hub"
                        curl -X DELETE "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/automatedgo/tags/$tag/" \
                        -u "${{ vars.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}"
                    fi
                done

          - name: Delete Old GHCR Tags
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
                echo "Fetching GHCR tags..."
                tags=$(gh api "repos/${{ github.repository_owner }}/packages/container/automatedgo/versions" | jq -r '.[].metadata.container.tags[]')
                echo "Tags found in GHCR:"
                echo "$tags"
                latest_tag=$(echo "$tags" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1)
                echo "Latest semantic version tag is $latest_tag"
                for tag in $tags; do
                    if [[ ! "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ || "$tag" != "$latest_tag" ]]; then
                        echo "Deleting tag $tag from GHCR"
                        version_id=$(gh api "repos/${{ github.repository_owner }}/packages/container/automatedgo/versions" | jq -r ".[] | select(.metadata.container.tags[] == \"$tag\") | .id")
                        gh api --method DELETE "/user/packages/container/automatedgo/versions/$version_id"
                    fi
                done
